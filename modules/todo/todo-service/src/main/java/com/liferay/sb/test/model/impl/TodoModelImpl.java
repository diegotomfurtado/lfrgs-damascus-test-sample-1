/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sb.test.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.sb.test.model.Todo;
import com.liferay.sb.test.model.TodoModel;
import com.liferay.sb.test.model.TodoSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Todo service. Represents a row in the &quot;Todo_Todo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TodoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TodoImpl}.
 * </p>
 *
 * @author "diegofurtado"
 * @see TodoImpl
 * @generated
 */
@JSON(strict = true)
public class TodoModelImpl extends BaseModelImpl<Todo> implements TodoModel {

	/**
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a todo model instance should use the <code>Todo</code> interface instead.
	 */
	public static final String TABLE_NAME = "Todo_Todo";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"todoId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"todoBooleanStat", Types.BOOLEAN}, {"todoDateTime", Types.TIMESTAMP},
		{"todoDocumentLibrary", Types.VARCHAR}, {"todoDouble", Types.DOUBLE},
		{"todoInteger", Types.INTEGER}, {"todoRichText", Types.VARCHAR},
		{"todoText", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"urlTitle", Types.VARCHAR},
		{"todoTitleName", Types.VARCHAR}, {"todoSummaryName", Types.VARCHAR},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("todoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("todoBooleanStat", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("todoDateTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("todoDocumentLibrary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("todoDouble", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("todoInteger", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("todoRichText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("todoText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("urlTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("todoTitleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("todoSummaryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Todo_Todo (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,todoId LONG not null primary key,title VARCHAR(80) null,todoBooleanStat BOOLEAN,todoDateTime DATE null,todoDocumentLibrary VARCHAR(512) null,todoDouble DOUBLE,todoInteger INTEGER,todoRichText TEXT null,todoText TEXT null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,urlTitle VARCHAR(75) null,todoTitleName VARCHAR(255) null,todoSummaryName TEXT null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Todo_Todo";

	public static final String ORDER_BY_JPQL = " ORDER BY todo.todoId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Todo_Todo.todoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long STATUS_COLUMN_BITMASK = 4L;

	public static final long TITLE_COLUMN_BITMASK = 8L;

	public static final long TODOBOOLEANSTAT_COLUMN_BITMASK = 16L;

	public static final long TODODATETIME_COLUMN_BITMASK = 32L;

	public static final long TODODOCUMENTLIBRARY_COLUMN_BITMASK = 64L;

	public static final long TODODOUBLE_COLUMN_BITMASK = 128L;

	public static final long TODOID_COLUMN_BITMASK = 256L;

	public static final long TODOINTEGER_COLUMN_BITMASK = 512L;

	public static final long TODORICHTEXT_COLUMN_BITMASK = 1024L;

	public static final long TODOTEXT_COLUMN_BITMASK = 2048L;

	public static final long URLTITLE_COLUMN_BITMASK = 4096L;

	public static final long USERID_COLUMN_BITMASK = 8192L;

	public static final long UUID_COLUMN_BITMASK = 16384L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Todo toModel(TodoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Todo model = new TodoImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setTodoId(soapModel.getTodoId());
		model.setTitle(soapModel.getTitle());
		model.setTodoBooleanStat(soapModel.isTodoBooleanStat());
		model.setTodoDateTime(soapModel.getTodoDateTime());
		model.setTodoDocumentLibrary(soapModel.getTodoDocumentLibrary());
		model.setTodoDouble(soapModel.getTodoDouble());
		model.setTodoInteger(soapModel.getTodoInteger());
		model.setTodoRichText(soapModel.getTodoRichText());
		model.setTodoText(soapModel.getTodoText());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUrlTitle(soapModel.getUrlTitle());
		model.setTodoTitleName(soapModel.getTodoTitleName());
		model.setTodoSummaryName(soapModel.getTodoSummaryName());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Todo> toModels(TodoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Todo> models = new ArrayList<Todo>(soapModels.length);

		for (TodoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TodoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _todoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTodoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _todoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Todo.class;
	}

	@Override
	public String getModelClassName() {
		return Todo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Todo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Todo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Todo, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Todo)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Todo, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Todo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Todo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Todo, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Todo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Todo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Todo.class.getClassLoader(), Todo.class, ModelWrapper.class);

		try {
			Constructor<Todo> constructor =
				(Constructor<Todo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Todo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Todo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Todo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Todo, Object>>();
		Map<String, BiConsumer<Todo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Todo, ?>>();

		attributeGetterFunctions.put("mvccVersion", Todo::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion", (BiConsumer<Todo, Long>)Todo::setMvccVersion);
		attributeGetterFunctions.put("uuid", Todo::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Todo, String>)Todo::setUuid);
		attributeGetterFunctions.put("todoId", Todo::getTodoId);
		attributeSetterBiConsumers.put(
			"todoId", (BiConsumer<Todo, Long>)Todo::setTodoId);
		attributeGetterFunctions.put("title", Todo::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Todo, String>)Todo::setTitle);
		attributeGetterFunctions.put(
			"todoBooleanStat", Todo::getTodoBooleanStat);
		attributeSetterBiConsumers.put(
			"todoBooleanStat",
			(BiConsumer<Todo, Boolean>)Todo::setTodoBooleanStat);
		attributeGetterFunctions.put("todoDateTime", Todo::getTodoDateTime);
		attributeSetterBiConsumers.put(
			"todoDateTime", (BiConsumer<Todo, Date>)Todo::setTodoDateTime);
		attributeGetterFunctions.put(
			"todoDocumentLibrary", Todo::getTodoDocumentLibrary);
		attributeSetterBiConsumers.put(
			"todoDocumentLibrary",
			(BiConsumer<Todo, String>)Todo::setTodoDocumentLibrary);
		attributeGetterFunctions.put("todoDouble", Todo::getTodoDouble);
		attributeSetterBiConsumers.put(
			"todoDouble", (BiConsumer<Todo, Double>)Todo::setTodoDouble);
		attributeGetterFunctions.put("todoInteger", Todo::getTodoInteger);
		attributeSetterBiConsumers.put(
			"todoInteger", (BiConsumer<Todo, Integer>)Todo::setTodoInteger);
		attributeGetterFunctions.put("todoRichText", Todo::getTodoRichText);
		attributeSetterBiConsumers.put(
			"todoRichText", (BiConsumer<Todo, String>)Todo::setTodoRichText);
		attributeGetterFunctions.put("todoText", Todo::getTodoText);
		attributeSetterBiConsumers.put(
			"todoText", (BiConsumer<Todo, String>)Todo::setTodoText);
		attributeGetterFunctions.put("groupId", Todo::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Todo, Long>)Todo::setGroupId);
		attributeGetterFunctions.put("companyId", Todo::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Todo, Long>)Todo::setCompanyId);
		attributeGetterFunctions.put("userId", Todo::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Todo, Long>)Todo::setUserId);
		attributeGetterFunctions.put("userName", Todo::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Todo, String>)Todo::setUserName);
		attributeGetterFunctions.put("createDate", Todo::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Todo, Date>)Todo::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Todo::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Todo, Date>)Todo::setModifiedDate);
		attributeGetterFunctions.put("urlTitle", Todo::getUrlTitle);
		attributeSetterBiConsumers.put(
			"urlTitle", (BiConsumer<Todo, String>)Todo::setUrlTitle);
		attributeGetterFunctions.put("todoTitleName", Todo::getTodoTitleName);
		attributeSetterBiConsumers.put(
			"todoTitleName", (BiConsumer<Todo, String>)Todo::setTodoTitleName);
		attributeGetterFunctions.put(
			"todoSummaryName", Todo::getTodoSummaryName);
		attributeSetterBiConsumers.put(
			"todoSummaryName",
			(BiConsumer<Todo, String>)Todo::setTodoSummaryName);
		attributeGetterFunctions.put("status", Todo::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Todo, Integer>)Todo::setStatus);
		attributeGetterFunctions.put("statusByUserId", Todo::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId", (BiConsumer<Todo, Long>)Todo::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Todo::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Todo, String>)Todo::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Todo::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Todo, Date>)Todo::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getTodoId() {
		return _todoId;
	}

	@Override
	public void setTodoId(long todoId) {
		_columnBitmask |= TODOID_COLUMN_BITMASK;

		if (!_setOriginalTodoId) {
			_setOriginalTodoId = true;

			_originalTodoId = _todoId;
		}

		_todoId = todoId;
	}

	public long getOriginalTodoId() {
		return _originalTodoId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public boolean getTodoBooleanStat() {
		return _todoBooleanStat;
	}

	@JSON
	@Override
	public boolean isTodoBooleanStat() {
		return _todoBooleanStat;
	}

	@Override
	public void setTodoBooleanStat(boolean todoBooleanStat) {
		_columnBitmask |= TODOBOOLEANSTAT_COLUMN_BITMASK;

		if (!_setOriginalTodoBooleanStat) {
			_setOriginalTodoBooleanStat = true;

			_originalTodoBooleanStat = _todoBooleanStat;
		}

		_todoBooleanStat = todoBooleanStat;
	}

	public boolean getOriginalTodoBooleanStat() {
		return _originalTodoBooleanStat;
	}

	@JSON
	@Override
	public Date getTodoDateTime() {
		return _todoDateTime;
	}

	@Override
	public void setTodoDateTime(Date todoDateTime) {
		_columnBitmask |= TODODATETIME_COLUMN_BITMASK;

		if (_originalTodoDateTime == null) {
			_originalTodoDateTime = _todoDateTime;
		}

		_todoDateTime = todoDateTime;
	}

	public Date getOriginalTodoDateTime() {
		return _originalTodoDateTime;
	}

	@JSON
	@Override
	public String getTodoDocumentLibrary() {
		if (_todoDocumentLibrary == null) {
			return "";
		}
		else {
			return _todoDocumentLibrary;
		}
	}

	@Override
	public void setTodoDocumentLibrary(String todoDocumentLibrary) {
		_columnBitmask |= TODODOCUMENTLIBRARY_COLUMN_BITMASK;

		if (_originalTodoDocumentLibrary == null) {
			_originalTodoDocumentLibrary = _todoDocumentLibrary;
		}

		_todoDocumentLibrary = todoDocumentLibrary;
	}

	public String getOriginalTodoDocumentLibrary() {
		return GetterUtil.getString(_originalTodoDocumentLibrary);
	}

	@JSON
	@Override
	public double getTodoDouble() {
		return _todoDouble;
	}

	@Override
	public void setTodoDouble(double todoDouble) {
		_columnBitmask |= TODODOUBLE_COLUMN_BITMASK;

		if (!_setOriginalTodoDouble) {
			_setOriginalTodoDouble = true;

			_originalTodoDouble = _todoDouble;
		}

		_todoDouble = todoDouble;
	}

	public double getOriginalTodoDouble() {
		return _originalTodoDouble;
	}

	@JSON
	@Override
	public int getTodoInteger() {
		return _todoInteger;
	}

	@Override
	public void setTodoInteger(int todoInteger) {
		_columnBitmask |= TODOINTEGER_COLUMN_BITMASK;

		if (!_setOriginalTodoInteger) {
			_setOriginalTodoInteger = true;

			_originalTodoInteger = _todoInteger;
		}

		_todoInteger = todoInteger;
	}

	public int getOriginalTodoInteger() {
		return _originalTodoInteger;
	}

	@JSON
	@Override
	public String getTodoRichText() {
		if (_todoRichText == null) {
			return "";
		}
		else {
			return _todoRichText;
		}
	}

	@Override
	public void setTodoRichText(String todoRichText) {
		_columnBitmask |= TODORICHTEXT_COLUMN_BITMASK;

		if (_originalTodoRichText == null) {
			_originalTodoRichText = _todoRichText;
		}

		_todoRichText = todoRichText;
	}

	public String getOriginalTodoRichText() {
		return GetterUtil.getString(_originalTodoRichText);
	}

	@JSON
	@Override
	public String getTodoText() {
		if (_todoText == null) {
			return "";
		}
		else {
			return _todoText;
		}
	}

	@Override
	public void setTodoText(String todoText) {
		_columnBitmask |= TODOTEXT_COLUMN_BITMASK;

		if (_originalTodoText == null) {
			_originalTodoText = _todoText;
		}

		_todoText = todoText;
	}

	public String getOriginalTodoText() {
		return GetterUtil.getString(_originalTodoText);
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return "";
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		_columnBitmask |= URLTITLE_COLUMN_BITMASK;

		if (_originalUrlTitle == null) {
			_originalUrlTitle = _urlTitle;
		}

		_urlTitle = urlTitle;
	}

	public String getOriginalUrlTitle() {
		return GetterUtil.getString(_originalUrlTitle);
	}

	@JSON
	@Override
	public String getTodoTitleName() {
		if (_todoTitleName == null) {
			return "";
		}
		else {
			return _todoTitleName;
		}
	}

	@Override
	public void setTodoTitleName(String todoTitleName) {
		_todoTitleName = todoTitleName;
	}

	@JSON
	@Override
	public String getTodoSummaryName() {
		if (_todoSummaryName == null) {
			return "";
		}
		else {
			return _todoSummaryName;
		}
	}

	@Override
	public void setTodoSummaryName(String todoSummaryName) {
		_todoSummaryName = todoSummaryName;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Todo.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {

		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if (Validator.isNotNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException nsme) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler =
					com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
						getTrashHandler(
							trashHandler.getContainerModelClassName(
								containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(
					containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
			getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if ((trashHandler == null) ||
			Validator.isNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			return false;
		}

		try {
			ContainerModel containerModel =
				trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Todo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Todo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Todo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TodoImpl todoImpl = new TodoImpl();

		todoImpl.setMvccVersion(getMvccVersion());
		todoImpl.setUuid(getUuid());
		todoImpl.setTodoId(getTodoId());
		todoImpl.setTitle(getTitle());
		todoImpl.setTodoBooleanStat(isTodoBooleanStat());
		todoImpl.setTodoDateTime(getTodoDateTime());
		todoImpl.setTodoDocumentLibrary(getTodoDocumentLibrary());
		todoImpl.setTodoDouble(getTodoDouble());
		todoImpl.setTodoInteger(getTodoInteger());
		todoImpl.setTodoRichText(getTodoRichText());
		todoImpl.setTodoText(getTodoText());
		todoImpl.setGroupId(getGroupId());
		todoImpl.setCompanyId(getCompanyId());
		todoImpl.setUserId(getUserId());
		todoImpl.setUserName(getUserName());
		todoImpl.setCreateDate(getCreateDate());
		todoImpl.setModifiedDate(getModifiedDate());
		todoImpl.setUrlTitle(getUrlTitle());
		todoImpl.setTodoTitleName(getTodoTitleName());
		todoImpl.setTodoSummaryName(getTodoSummaryName());
		todoImpl.setStatus(getStatus());
		todoImpl.setStatusByUserId(getStatusByUserId());
		todoImpl.setStatusByUserName(getStatusByUserName());
		todoImpl.setStatusDate(getStatusDate());

		todoImpl.resetOriginalValues();

		return todoImpl;
	}

	@Override
	public int compareTo(Todo todo) {
		long primaryKey = todo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Todo)) {
			return false;
		}

		Todo todo = (Todo)obj;

		long primaryKey = todo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TodoModelImpl todoModelImpl = this;

		todoModelImpl._originalUuid = todoModelImpl._uuid;

		todoModelImpl._originalTodoId = todoModelImpl._todoId;

		todoModelImpl._setOriginalTodoId = false;

		todoModelImpl._originalTitle = todoModelImpl._title;

		todoModelImpl._originalTodoBooleanStat = todoModelImpl._todoBooleanStat;

		todoModelImpl._setOriginalTodoBooleanStat = false;

		todoModelImpl._originalTodoDateTime = todoModelImpl._todoDateTime;

		todoModelImpl._originalTodoDocumentLibrary =
			todoModelImpl._todoDocumentLibrary;

		todoModelImpl._originalTodoDouble = todoModelImpl._todoDouble;

		todoModelImpl._setOriginalTodoDouble = false;

		todoModelImpl._originalTodoInteger = todoModelImpl._todoInteger;

		todoModelImpl._setOriginalTodoInteger = false;

		todoModelImpl._originalTodoRichText = todoModelImpl._todoRichText;

		todoModelImpl._originalTodoText = todoModelImpl._todoText;

		todoModelImpl._originalGroupId = todoModelImpl._groupId;

		todoModelImpl._setOriginalGroupId = false;

		todoModelImpl._originalCompanyId = todoModelImpl._companyId;

		todoModelImpl._setOriginalCompanyId = false;

		todoModelImpl._originalUserId = todoModelImpl._userId;

		todoModelImpl._setOriginalUserId = false;

		todoModelImpl._setModifiedDate = false;

		todoModelImpl._originalUrlTitle = todoModelImpl._urlTitle;

		todoModelImpl._originalStatus = todoModelImpl._status;

		todoModelImpl._setOriginalStatus = false;

		todoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Todo> toCacheModel() {
		TodoCacheModel todoCacheModel = new TodoCacheModel();

		todoCacheModel.mvccVersion = getMvccVersion();

		todoCacheModel.uuid = getUuid();

		String uuid = todoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			todoCacheModel.uuid = null;
		}

		todoCacheModel.todoId = getTodoId();

		todoCacheModel.title = getTitle();

		String title = todoCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			todoCacheModel.title = null;
		}

		todoCacheModel.todoBooleanStat = isTodoBooleanStat();

		Date todoDateTime = getTodoDateTime();

		if (todoDateTime != null) {
			todoCacheModel.todoDateTime = todoDateTime.getTime();
		}
		else {
			todoCacheModel.todoDateTime = Long.MIN_VALUE;
		}

		todoCacheModel.todoDocumentLibrary = getTodoDocumentLibrary();

		String todoDocumentLibrary = todoCacheModel.todoDocumentLibrary;

		if ((todoDocumentLibrary != null) &&
			(todoDocumentLibrary.length() == 0)) {

			todoCacheModel.todoDocumentLibrary = null;
		}

		todoCacheModel.todoDouble = getTodoDouble();

		todoCacheModel.todoInteger = getTodoInteger();

		todoCacheModel.todoRichText = getTodoRichText();

		String todoRichText = todoCacheModel.todoRichText;

		if ((todoRichText != null) && (todoRichText.length() == 0)) {
			todoCacheModel.todoRichText = null;
		}

		todoCacheModel.todoText = getTodoText();

		String todoText = todoCacheModel.todoText;

		if ((todoText != null) && (todoText.length() == 0)) {
			todoCacheModel.todoText = null;
		}

		todoCacheModel.groupId = getGroupId();

		todoCacheModel.companyId = getCompanyId();

		todoCacheModel.userId = getUserId();

		todoCacheModel.userName = getUserName();

		String userName = todoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			todoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			todoCacheModel.createDate = createDate.getTime();
		}
		else {
			todoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			todoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			todoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		todoCacheModel.urlTitle = getUrlTitle();

		String urlTitle = todoCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			todoCacheModel.urlTitle = null;
		}

		todoCacheModel.todoTitleName = getTodoTitleName();

		String todoTitleName = todoCacheModel.todoTitleName;

		if ((todoTitleName != null) && (todoTitleName.length() == 0)) {
			todoCacheModel.todoTitleName = null;
		}

		todoCacheModel.todoSummaryName = getTodoSummaryName();

		String todoSummaryName = todoCacheModel.todoSummaryName;

		if ((todoSummaryName != null) && (todoSummaryName.length() == 0)) {
			todoCacheModel.todoSummaryName = null;
		}

		todoCacheModel.status = getStatus();

		todoCacheModel.statusByUserId = getStatusByUserId();

		todoCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = todoCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			todoCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			todoCacheModel.statusDate = statusDate.getTime();
		}
		else {
			todoCacheModel.statusDate = Long.MIN_VALUE;
		}

		return todoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Todo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Todo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Todo, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Todo)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Todo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Todo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Todo, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Todo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Todo>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private String _uuid;
	private String _originalUuid;
	private long _todoId;
	private long _originalTodoId;
	private boolean _setOriginalTodoId;
	private String _title;
	private String _originalTitle;
	private boolean _todoBooleanStat;
	private boolean _originalTodoBooleanStat;
	private boolean _setOriginalTodoBooleanStat;
	private Date _todoDateTime;
	private Date _originalTodoDateTime;
	private String _todoDocumentLibrary;
	private String _originalTodoDocumentLibrary;
	private double _todoDouble;
	private double _originalTodoDouble;
	private boolean _setOriginalTodoDouble;
	private int _todoInteger;
	private int _originalTodoInteger;
	private boolean _setOriginalTodoInteger;
	private String _todoRichText;
	private String _originalTodoRichText;
	private String _todoText;
	private String _originalTodoText;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _urlTitle;
	private String _originalUrlTitle;
	private String _todoTitleName;
	private String _todoSummaryName;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private Todo _escapedModel;

}